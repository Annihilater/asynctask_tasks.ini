# echo test 带颜色打印输出
[echo-test]
command=echo "\033[32mEcho Output: This sentence is green!\033[0m"

# asynctasks.vim 配置备份
[asynctasks-config-backup]
command=git add . && git commit -m 'asynctasks.vim backup' && git push && echo "\033[32mBACKUP SUCCESS: /Users/klause/.config/asynctask TO https://github.com/Annihilater/asynctask_tasks.ini.git\033[0m"
cwd=/Users/klause/.config/asynctask

# 使用 sublime 编辑 asynctasks.vim 配置
[asynctasks-config-editor-sublime]
command=open -a /Applications/Sublime\ Text.app ~/.config/asynctask/tasks.ini

# 使用 vi 编辑 asynctasks.vim 配置
[asynctasks-config-editor-vi]
command=vi ~/.config/asynctask/tasks.ini

# .zshrc 配置备份
[zshrc-config-backup]
command=git add . && git commit -m '~/.zshrc backup' && git push && echo "\033[32mBACKUP SUCCESS: /Users/klause/Documents/GitHub/zshrc_backup TO https://github.com/Annihilater/zshrc_backup.git\033[0m"
cwd=/Users/klause/Documents/GitHub/zshrc_backup

#检查本机 7890 和 7891 端口号占用
[check-port-7890]
command=lsof -i:7890 && lsof -i:7891

# 目录下文件/文件夹按大小排序
[dir-sort]
command=du -sh * | sort -rh


################################################################################################################################################################
#Mac 查看 java 安装目录
[show-java-install-dir]
command=echo "\033[32m/usr/libexec/java_home -V\033[0m" && /usr/libexec/java_home -V

#Mac 查看 java 版本 1
[java-version-1]
command = echo "\033[32mjavac --version\033[0m" && javac --version

#Mac 查看 java 版本 2
[java-version-2]
command = echo "\033[32mjava -version\033[0m" && java -version


################################################################################################################################################################
# blog backup
[blog-post-backup]
command=git add . && git commit -m 'feat: blog post backup' && git push && echo "\033[32mBACKUP SUCCESS: /Users/klause/Documents/new_blog/source/_posts TO https://github.com/Annihilater/blog-post.git\033[0m"
cwd=/Users/klause/Documents/new_blog/source/_posts

################################################################################################################################################################
# 开启 apache web 服务器
[apache-web-start]
command=sudo apachectl start && echo "\033[32mapache web root: /Library/WebServer/Documents' && echo 'ps aux | grep -v grep | grep httpd:\033[0m" && ps aux | grep -v grep | grep httpd

# 关闭 apache web 服务器
[apache-web-stop]
command=sudo apachectl stop && echo "\033[32mps aux | grep -v grep | grep httpd\033[0m" && ps aux | grep -v grep | grep httpd

# 重启 apache web 服务器
[apache-web-restart]
command=sudo apachectl restart && echo "\033[32mapache web root: /Library/WebServer/Documents' && echo 'ps aux | grep -v grep | grep httpd\033[0m" && ps aux | grep -v grep | grep httpd

# 查看 apache web 服务器状态
[apache-web-check]
command=sudo apachectl fullstatus

# 启动 minikube
[minikube-start]
command=minikube start --vm-driver=virtualbox

# fzf 搜索历史命令
[fzf-history-command]
command=history | fzf +s --tac

# fzf 切换 git 分支
[fzf-git-checkout-branch]
command=git checkout $(git branch -r | fzf)


# Mac 查看 CPU 型号
[Mac-cpu-check]
command=sysctl -n machdep.cpu.brand_string

# Mac 查看 cpu 详情
[Mac-cpu-detail]
command=sysctl machdep.cpu


################################################################################################################################################################
# Git
[git-push-master]
command=git push origin master

[git-pull-master]
command=git pull origin master

[git-fetch-master]
command=git fetch origin master

[git-checkout]
command=git checkout $(?branch)

[git-proxy-on]
command=git config --global http.proxy "socks5://localhost:7890" && git config --global https.proxy "socks5://localhost:7890"

[git-proxy-off]
command=git config --global --unset http.proxy && git config --global --unset https.proxy

[git-status]
command=git status

[git-log]
command=tig



[misc-supervisor-reload]
command=sudo supervisorctl reload

[misc-weather]
command=curl -s wttr.in/?n0

[misc-benchmark-cpu]
command=python -c "import test.pystone;print(test.pystone.pystones(500000))"

[misc-benchmark-mem]
command=dd if=/dev/zero of=/dev/null bs=1M count=32768

[misc-disk-usage]
command=df -h

[misc-system-info]
command=neofetch

[misc-create-qr-code]
command=echo "\033[32m$(?content)\033[0m" | curl -F-=\<- qrenco.de

[net-check-port]
command=sudo lsof -i :$(?port)

[net-host-ip]
command=hostname --all-ip-addresses | tr " " "\n" | grep -v "0.0.0.0" | grep -v "127.0.0.1"
command/darwin=ifconfig  | grep -E 'inet.[0-9]' | grep -v '127.0.0.1' | awk '{ print $2}'

[net-start-http]
command=python -m SimpleHTTPServer $(?port)

[net-whois-domain]
command=/usr/bin/whois -h whois.internic.net $(?domain) | sed '/NOTICE:/q'

[file-build]
command:c,cpp=gcc -O2 -Wall "$(?VIM_FILEPATH)" -o "$(?VIM_PATHNOEXT)" -lstdc++ -lm -msse3
command:go=go build -o "$(?VIM_PATHNOEXT)" "$(?VIM_FILEPATH)"
command:make=make -f "$(?VIM_FILEPATH)"
cwd=$(?VIM_FILEDIR)

[file-run]
command="$(?VIM_FILEPATH)"
command:c,cpp="$(?VIM_PATHNOEXT)"
command:go="$(?VIM_PATHNOEXT)"
command:python=python "$(?VIM_FILENAME)"
command:javascript=node "$(?VIM_FILENAME)"
command:sh=sh "$(?VIM_FILENAME)"
command:lua=lua "$(?VIM_FILENAME)"
command:perl=perl "$(?VIM_FILENAME)"
command:ruby=ruby "$(?VIM_FILENAME)"
cwd=$(?VIM_FILEDIR)

[project-build]
command=make
# 设置在当前项目的根目录处运行 make
cwd=$(?VIM_ROOT)

[project-run]
command=make run
# <root> 是 $(?VIM_ROOT) 的别名，写起来容易些
cwd=<root>
output=terminal

# Mac mini ubuntu 18.04
[ssh-ubuntu]
command=ssh ubuntu


################################################################################################################################################################
# HomeBrew 备份到配置文件
[brew-backup-to-configfile]
command=brew bundle dump --describe --force --file="/Users/klause/Documents/Homebrew/brewbackup.txt" && echo "\033[32mbrew-backup success: \n/Users/klause/Documents/Homebrew/brewbackup.txt\033[0m"

# Homebrew 配置文件备份到 github
[brew-configfile-upload-to-github]
command=git add . && git commit -m 'Homebrew backup to GitHub: ~/Documents/Homebrew' && git push && echo "\033[32mBACKUP SUCCESS: /Users/klause/Documents/Homebrew TO https://github.com/Annihilater/HomebrewBackup\033[0m"
cwd=/Users/klause/Documents/Homebrew

# HomeBrew 备份到配置文件，并将配置文件备份到 github
[brew-backup-to-configfile-and-upload-to-github]
command=brew bundle dump --describe --force --file="/Users/klause/Documents/Homebrew/brewbackup.txt" && echo "\033[32mbrew-backup success: \n/Users/klause/Documents/Homebrew/brewbackup.txt\033[0m" && echo " " && git add . && git commit -m 'Homebrew backup to GitHub: ~/Documents/Homebrew' && git push && echo "\033[32mBACKUP SUCCESS: /Users/klause/Documents/Homebrew TO https://github.com/Annihilater/HomebrewBackup\033[0m"
cwd=/Users/klause/Documents/Homebrew

[brew-search]
command=brew search $(?TEXT|/REGEX/)

[berw-info]
command=brew info $(?FORMULA...)

[brew-install]
command=brew install $(?FORMULA...)

[brew-update]
command=brew update

[brew-upgrade]
command=brew upgrade $(?FORMULA...)

[brew-uninstall]
command=brew uninstall $(?FORMULA...)

[brew-list]
command=brew list

[brew-config]
command=brew config

[brew-doctor]
command=brew doctor

[brew-install --verbose --debug]
command=brew install --verbose --debug $(?FORMULA)

[brew-create]
command=brew create $(?URL $(?--no-fetch))

[brew-edit]
command=brew edit $(?FORMULA...)

[brew-commands]
command=brew commands

[brew-help]
command=brew help $(?COMMAND)

[man-brew]
command=man brew

[brew-services-list]
command=brew services list

[brew-services-start]
command=brew services start $(?SERVICE NAME)

[brew-services-stop]
command=brew services stop $(?SERVICE NAME)

[brew-services-restart]
command=brew services restart $(?SERVICE NAME)

[brew-start-mongodb]
command=brew services start mongodb/brew/mongodb-community && ps aux | grep -v grep | grep mongodb

[brew-stop-mongodb]
command=brew services stop mongodb/brew/mongodb-community && ps aux | grep -v grep | grep mongodb

[brew-restart-mongodb]
command=brew services restart mongodb/brew/mongodb-community && ps aux | grep -v grep | grep mongodb

[fix-mongodb]
command=mongod --config=/usr/local/etc/mongod.conf --repair && mongod ps aux | grep -v grep | grep mongodb

[brew-start-redis]
command=brew services start redis && ps aux | grep -v grep | grep redis

[brew-stop-redis]
command=brew services stop redis && ps aux | grep -v grep | grep redis

[brew-restart-redis]
command=brew services restart redis && ps aux | grep -v grep | grep redis

[check]
command=echo "\033[32mcheck xxxxx\033[0m" && ps aux | grep -v grep | grep $(?NAME)

[check-mysql]
command=echo "\033[32mcheck mysql\033[0m" && ps aux | grep -v grep | grep mysql

[check-redis]
command=echo "\033[32mcheck redis\033[0m" && ps aux | grep -v grep | grep redis

[check-mongodb]
command=echo "\033[32mcheck mongodb\033[0m" && ps aux | grep -v grep | grep mongodb

[check-aria2]
command=echo "\033[32mcheck aria2\033[0m" && ps aux | grep -v grep | grep aria2

[start-aria2]
command=aria2c --conf-path='/Users/klause/.aria2/aria2.conf' -D

[start-mysql]
command=echo "\033[32msudo /usr/local/mysql/support-files/mysql.server start\033[0m" && sudo /usr/local/mysql/support-files/mysql.server start && echo "\033[32mps aux | grep -v grep | grep mysql\033[0m" && ps aux | grep -v grep | grep mysql

[stop-mysql]
command=echo "\033[32msudo /usr/local/mysql/support-files/mysql.server stop\033[0m" && sudo /usr/local/mysql/support-files/mysql.server stop && echo "\033[32mps aux | grep -v grep | grep mysql\033[0m" && ps aux | grep -v grep | grep mysql


################################################################################################################################################################
[hexo-blog-deploy]
command=hexo clean && hexo g && hexo deploy
cwd=/Users/klause/Documents/blog

[hexo-blog-debug]
command=hexo clean && hexo g && hexo server
cwd=/Users/klause/Documents/blog


################################################################################################################################################################
[proxy]
command=curl -L tool.lu/ip && echo "\033[32m' && export all_proxy=socks5://127.0.0.1:7891 && echo 'to\033[0m" && curl -L tool.lu/ip

[unproxy]
command=curl -L tool.lu/ip && echo "\033[32m' && unset all_proxy && echo 'to\033[0m" && curl -L tool.lu/ip

[show-ip-china]
command=curl -L tool.lu/ip

[show-ip-global]
command=curl https://api.myip.com


################################################################################################################################################################
# Anaconda
# conda shell 初始化
[conda-init]
command=conda init $(?SHELL_NAME)

# 新建环境, 不安装任何包
[conda-create-with-no-package]
command=conda create --name $(?ENV_NAME)

# 新建环境, 且在环境中安装 PACKAGES 包
[conda-create-with-packages]
command=conda create --name $(?ENV_NAME) $(?PACKAGES)

# 删除环境
[conda-remove]
command=conda remove -n $(?ENV_NAME) --all

# 激活环境(asynctask 中不起作用，因为是多线程操作)
[conda-activate-not-work-in-asynctask]
command=conda activate $(?ENV_NAME_OR_PREFIX)

# 关闭环境(asynctask 中不起作用，因为是多线程操作)
[conda-deactivate-not-work-in-asynctask]
command=conda deactivate

# 显示本机所有环境
[conda-show-envs]
command=conda info -e

# 显示当前所在环境
[conda-info]
command=conda info

# 复制环境
[conda-copy-env]
command=conda create -n $(?NEW_ENV) --clone $(?OLD_ENV)


################################################################################################################################################################
[open-with-vscode]
command=open -a /Applications/Visual\ Studio\ Code.app $(?FILE NAME)

[open-with-sublime]
command=open -a /Applications/Sublime\ Text.app $(?FILE NAME)

[config-asynctasks.vim]
command=open -a /Applications/Sublime\ Text.app ~/.config/asynctask/tasks.ini


################################################################################################################################################################
[path-kafka]
command=echo "\033[32mkafka: /usr/local/Cellar/kafka\033[0m" && cd /usr/local/Cellar/kafka && pwd
[config-kafka]
command=echo "\033[32mkafka: /usr/local/etc/kafka\033[0m" && cd /usr/local/etc/kafka && pwd

[path-zookeeper]
command=echo "\033[32mzookeeper: /usr/local/Cellar/zookeeper\033[0m" && cd /usr/local/Cellar/zookeeper && pwd
[config-zookeeper]
command=echo "\033[32mzookeeper: /usr/local/etc/zookeeper\033[0m" && cd /usr/local/etc/zookeeper && pwd

[path-redis]
command=echo "\033[32mredis: /usr/local/Cellar/redis\033[0m" && cd /usr/local/Cellar/redis && pwd
[config-redis]
command=echo "\033[32mredis: /usr/local/etc\033[0m" && cd /usr/local/etc && pwd

[path-nginx]
command=echo "\033[32mnginx: /usr/local/etc/nginx\033[0m" && cd /usr/local/etc/nginx && pwd

[path-mysql]
command=echo "\033[32mmysql: /usr/local/mysql\033[0m" && cd /usr/local/mysql && pwd

[path-mongodb]
command=echo "\033[32mmongodb: /usr/local/Cellar/mongodb-community\033[0m" && cd /usr/local/Cellar/mongodb-community && pwd



################################################################################################################################################################
# Kafka
[kafka-topic-create]
command=kafka-topics --zookeeper localhost:2181 --create --topic $(?TOPIC NAME) --partitions $(?分区数) --replication-factor $(?备份数) 

[kafka-topic-delete]
command=kafka-topics --zookeeper localhost:2181 --delete --topic $(?TOPIC NAME)  

[kafka-topic-list] 
command=kafka-topics --zookeeper localhost:2181 --list

[kafka-topic-check]
command=kafka-topics --zookeeper localhost:2181 --describe --topic $(?TOPIC NAME)

[kafka-topic-add-partition]
command=kafka-topics --zookeeper localhost:2181 --alter --topic $(?TOPIC NAME) --partitions $(?NEW PARTITIONCOUNT)

[kafka-produce-message]
# 生产消息
command=kafka-console-producer --broker-list localhost:9092 --topic $(?TOPIC NAME)

# 从头部开始消费消息
[kafka-consume-message-from-beginning]
command=kafka-console-consumer --bootstrap-server localhost:9092 --topic $(?TOPIC NAME) --from-beginning

# 从尾部开始消费消息
[kafka-consume-message-from-latest]
command=kafka-console-consumer --bootstrap-server localhost:9092 --topic $(?TOPIC NAME) --offset latest --partition $(?PARTITION NUMBER)

# 指定分区消费消息
[kafka-consume-message-from-latest]
command=kafka-console-consumer --bootstrap-server localhost:9092 --topic $(?TOPIC NAME) --offset latest --partition $(?PARTITION NUMBER)

# 修改分区总数(只增不减)
[kafka-update-PartitionCount]
command=kafka-topics --bootstrap-server localhost:2181 --alter --topic $(?TOPIC NAME) --partitions $(?NEW PARTITIONCOUNT)

# 指定 Consumer Group 从头部开始消费消息
[kafka-consume-message-by-group]
command=kafka-console-consumer --bootstrap-server localhost:9092 --topic $(?TOPIC NAME) -group $(?GROUP NAME) --from-beginning

# 查看所有 Group
[kafka-consume-group-list]
command=kafka-consumer-groups --bootstrap-server localhost:9092 --list

# 查看单个 Group
[kafka-consume-group-check]
command=kafka-consumer-groups --bootstrap-server localhost:9092 --group $(?GROUP NAME) --describe

# 删除 Group 中的 Topic
[kafka-group-topic-delete]
command=kafka-consumer-groups --bootstrap-server localhost:9092 --group $(?GROUP NAME) --topic $(?TOPIC NAME) --delete

# 删除 Group
[kafka-group-delete]
command=kafka-consumer-groups --bootstrap-server localhost:9092 --group $(?GROUP NAME) --topic $(?TOPIC NAME) --delete

# kafka 平衡 leader
[kafka-平衡-leader]
command=kafka-preferred-replica-election --bootstrap-server localhost:9092

# kafka 自带的压测工具
[kafka-自带的压测工具]
command=kafka-producer-perf-test --topic $(?TOPIC NAME) --num-records 100 --record-size 1 --throughput 100 --producer-props bootstrap.servers=localhost:9092 


################################################################################################################################################################
# 黑客帝国终端代码雨
[cmatrix-hack-黑客帝国终端代码雨-彩色版]
command=cmatrix -abr

# 黑客帝国终端代码雨
[cmatrix-hack-黑客帝国终端代码雨-默认版]
command=cmatrix

# 更新 README.md
[git-update-README.md]
command=git add README.md && git commit -m 'update README.md' && git push

# grep 
[grep]
command=echo "\033[32mps aux | grep -v grep | grep $(?NAME)\033[0m" && ps aux | grep -v grep | grep $(?NAME)
################################################################################################################################################################
# Docker
[docker-version-显示 Docker 版本信息]
command=docker version

[docker-info-查看 Docker 系统信息]
command=docker info

[docker-show-images-显示所有镜像]
command=docker images

[docker-show-images-显示单个镜像]
command=docker images $(?[REPOSITORY[:TAG]])

[docker-ps-show-containers-显示所有正在运行的容器]
command=docker ps

[docker-ps-a-show-containers-显示所有容器]
command=docker ps -a

[docker-rmi-delete-删除镜像]
command=docker rmi $(?[REPOSITORY[:TAG]]) && echo "\033[32m docker images \033[0m" && docker images

[docker-rmi-delete-删除镜像-强制]
command=docker rmi -f $(?[REPOSITORY[:TAG]]) && echo "\033[32m docker images \033[0m" && docker images

[docker-rmi-delete-删除镜像-所有]
command=docker rmi $(docker images -q) && echo "\033[32m docker images \033[0m" && docker images

[docker-start-启动容器]
command=docker start $(?CONTAINER NAME) && echo "\033[32m docker ps \033[0m" && docker ps && echo "\033[32m docker ps -a \033[0m" && docker ps -a

[docker-stop-停止容器]
command=docker stop $(?CONTAINER NAME) && echo "\033[32m docker ps \033[0m" && docker ps && echo "\033[32m docker ps -a \033[0m" && docker ps -a

[docker-stop-停止所有容器]
command=docker stop $(docker ps -aq) && echo "\033[32m docker ps \033[0m" && docker ps && echo "\033[32m docker ps -a \033[0m" && docker ps -a

[docker-kill-杀掉运行中的容器]
command=docker kill -s KILL $(?CONTAINER NAME) && echo "\033[32m docker ps \033[0m" && docker ps && echo "\033[32m docker ps -a \033[0m" && docker ps -a

[docker-delete-删除所有已停止的容器]
command=docker rm $(docker ps -a -q) && echo "\033[32m docker ps \033[0m" && docker ps && echo "\033[32m docker ps -a \033[0m" && docker ps -a

[docker-delete-删除所有已退出的容器]
command=docker rm $(docker ps -q -f status=exited) && echo "\033[32m docker ps \033[0m" && docker ps && echo "\033[32m docker ps -a \033[0m" && docker ps -a

[docker-delete-停止并删除所有容器]
command=docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q) && echo "\033[32m docker ps \033[0m" && docker ps && echo "\033[32m docker ps -a \033[0m" && docker ps -a

[docker-create-创建容器不启动它]
command=docker create --name $(?CONTAINER NAME) $(?IMGAE NAME) && echo "\033[32m docker ps \033[0m" && docker ps && echo "\033[32m docker ps -a \033[0m" && docker ps -a

[docker-run-前台启动]
command=docker run --name $(?CONTAINER NAME) $(?IMGAE NAME) && echo "\033[32m docker ps \033[0m" && docker ps && echo "\033[32m docker ps -a \033[0m" && docker ps -a

[docker-run-后台启动]
command=docker run --name $(?CONTAINER NAME) -d $(?IMGAE NAME) && echo "\033[32m docker ps \033[0m" && docker ps && echo "\033[32m docker ps -a \033[0m" && docker ps -a

[docker-pause-暂停容器]
command=docker pause $(?CONTAINER NAME) && echo "\033[32m docker ps \033[0m" && docker ps && echo "\033[32m docker ps -a \033[0m" && docker ps -a

[docker-pause-恢复容器]
command=docker unpause $(?CONTAINER NAME) && echo "\033[32m docker ps \033[0m" && docker ps && echo "\033[32m docker ps -a \033[0m" && docker ps -a

[docker-exec-在容器中以交互模式执行容器内的脚本]
command=docker exec -it $(?CONTAINER NAME) /bin/sh $(?PATH TO SCRIPT)

[docker-exec-在容器中开启一个交互模式的终端]
command=docker exec -it $(?CONTAINER NAME) /bin/bash

[docker-inspect-获取镜像的元信息]
command=docker inspect $(?IMGAE NAME)

[docker-inspect-获取正在运行容器的 IP]
command=docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(?CONTAINER NAME)

[docker-top-查看容器的进程信息]
command=docker top $(?CONTAINER NAME)

[docker-status-查看所有运行容器的进程信息]
command=for i in `docker ps |grep Up|awk '{print $1}'`;do echo \ &&docker top $i; done

[docker-attach-容器将访问日志指到标准输出,连接到容器查看访问信息]
command=docker attach --sig-proxy=false $(?CONTAINER NAME)

[docker-events-显示特定镜像在指定日期后的所有事件]
command=docker events -f "image"="$(?IMGAE NAME)" --since=$(?DATE)

[docker-logs-跟踪查看容器的日志输出]
command=docker logs -f $(?CONTAINER NAME)

[docker-logs-查看容器指定日期之后的最新10条日志]
command=docker logs --since="$(?DATE)" --tail=10 $(?CONTAINER NAME)

[docker-wait-阻塞运行直到容器停止,然后打印出它的退出代码]
command=docker wait $(?CONTAINER NAME)

[docker-export-将指定id的容器按日期保存为tar文件]
command=docker export -o $(?CONTAINER NAME)-`date +%Y%m%d`.tar $(?CONTAINER ID)

[docker-port-查看容器的端口映射情况]
command=docker port $(?CONTAINER NAME)

[docker-commit-将容器保存为新的镜像,并添加提交人信息和说明信息]
command=docker commit -a "$(?Author)" -m "$(?Summary)" $(?CONTAINER ID)  $(?[REPOSITORY[:TAG]])

[docker-copy-将主机 SOURCE DIR 目录拷贝到容器的 DESTINATION DIR 目录下]
command=docker cp $(?SOURCE DIR) $(?CONTAINER ID):$(?DESTINATION DIR)

[docker-copy-将容器的 SOURCE DIR 目录拷贝到主机的 DESTINATION DIR 目录中]
command=docker cp $(?CONTAINER ID):$(?SOURCE DIR) $(?DESTINATION DIR)

[docker-diff-查看容器的文件结构更改]
command=docker diff $(?CONTAINER NAME)

[docker-login-登录]
command=docker login -u $(?USERNAME) -p $(?PASSWORD)

[docker-logout-登出]
command=docker logout

[docker-pull-从Docker Hub下载最新版镜像,忽略镜像校验]
command=docker pull $(?NAME[:TAG|@DIGEST])

[docker-pull-从Docker Hub下载最新版镜像,启用镜像校验]
command=command=docker pull --disable-content-trust :false $(?NAME[:TAG|@DIGEST])

[docker-push]
command=docker push $(?[REPOSITORY[:TAG]])

[docker-search-从Docker Hub查找所有镜像名包含 KEY WORD,并且收藏数大于 NUMBER 的镜像]
command=docker search -s $(?NUMBER) $(?KEY WORD)

[docker-tag-修改镜像标记]
command=docker tag $(?OLD [REPOSITORY[:TAG]]) $(?NEW [REPOSITORY[:TAG]])

[docker-history-查看本地镜像的创建历史]
command=docker history $(?[REPOSITORY[:TAG]])

[docker-save-将镜像生成 FILENAME.tar 文档]
command=docker save -o $(?FILENAME).tar $(?[REPOSITORY[:TAG]])

[docker-load-导入镜像]
command=docker load < $(?IMAGE FILE)

[docker-load-导入镜像,指定导入文件]
command=docker load --input $(?IMAGE FILE)

[docker-import-从镜像归档文件创建镜像，并命名]
command=docker import $(?IMAGE FILE) $(?[REPOSITORY[:TAG]])

[docker-system-prune-完整的系统清理]
command=docker system prune

[docker-container-prune-容器清理]
command=docker container prune

[dockerimage-prune-镜像清理]
command=docker image prune

[docker-network-网络清理]
command=docker network prune

[docker-volume-prune-卷清理]
command=docker volume prune


################################################################################################################################################################
[mysql-查看 mysql 配置文件路径]
command=$(which mysqld)  --verbose --help | grep -A 1 'Default options'

################################################################################################################################################################
